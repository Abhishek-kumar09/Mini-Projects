[{"/home/abhishhek/cfc-proj/pokemon/src/index.js":"1","/home/abhishhek/cfc-proj/pokemon/src/App.js":"2","/home/abhishhek/cfc-proj/pokemon/src/reportWebVitals.js":"3","/home/abhishhek/cfc-proj/pokemon/src/components/sides.js":"4","/home/abhishhek/cfc-proj/pokemon/src/components/Cards.js":"5","/home/abhishhek/cfc-proj/pokemon/src/cards/index.js":"6"},{"size":501,"mtime":1608049009257,"results":"7","hashOfConfig":"8"},{"size":2782,"mtime":1608149172385,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607635067899,"results":"10","hashOfConfig":"8"},{"size":510,"mtime":1607878174077,"results":"11","hashOfConfig":"8"},{"size":1980,"mtime":1607878571275,"results":"12","hashOfConfig":"8"},{"size":7290,"mtime":1608148247721,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"xa3i0h",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/home/abhishhek/cfc-proj/pokemon/src/index.js",[],["28","29"],"/home/abhishhek/cfc-proj/pokemon/src/App.js",["30","31","32"],"/home/abhishhek/cfc-proj/pokemon/src/reportWebVitals.js",[],"/home/abhishhek/cfc-proj/pokemon/src/components/sides.js",[],"/home/abhishhek/cfc-proj/pokemon/src/components/Cards.js",[],"/home/abhishhek/cfc-proj/pokemon/src/cards/index.js",["33"],"import { render } from 'react-dom'\nimport React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport { Button, Container, Typography } from '@material-ui/core'\n// import './styles.css'\n\n\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nexport default function Deck({ pid, cards, oponentCard, playerStats, setPlayerStats, unfade, doUnfade, revealedCount, setRevCount, setGameOver }) {\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 && index >= cards.length - revealedCount // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.05 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === cards.length) setTimeout(() => {\n      setGameOver(true)\n      set(i => to(i))  \n      gone.clear()\n    }, 600)\n  })\n  \n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} style={{\n        backgroundColor: 'white',\n        transform: interpolate([rot, scale], trans),\n        padding: '10px',\n      }} >\n        {\n          !unfade[pid].includes(i)\n            ? (\n              <Container style={{\n                backgroundImage: `url('https://cdn.bulbagarden.net/upload/1/17/Cardback.jpg')`,\n                height: '100%',\n                width: '100%',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',\n              }}\n                onClick={() => {\n                  pid === 0\n                    ? doUnfade([[...unfade[0], i], [...unfade[1]]])\n                    : doUnfade([[...unfade[0]], [...unfade[1], i]])\n                }}\n              >\n                <Typography variant=\"h3\">{i}</Typography>\n              </Container>\n            ) : (\n              <Container style={{\n                backgroundColor: 'rgba(255, 255, 0, 0.4)',\n                backgroundImage: `url(${cards[i].url})`,\n                backgroundSize: 'contain',\n                backgroundPositionY: 'top',\n                backgroundRepeat: 'no-repeat',\n                height: '100%'\n              }}>\n                <div style={{ paddingTop: '350px' }}>\n                  {/* <Typography variant=\"h3\">{i}</Typography> */}\n                  <Typography variant=\"h3\" noWrap align=\"center\" style={{ fontWeight: 700 }} playerStats={playerStats}>{cards[i].name}</Typography>\n                  <CustomButton pid={pid} data={`Attack: ${cards[i].attack}`} index={i} oponentCard={oponentCard} playerStats={playerStats} setPlayerStats={setPlayerStats} unfade={unfade} doUnfade={doUnfade} revealedCount={revealedCount} setRevCount={setRevCount}  />\n                  <CustomButton pid={pid} data={`Speed: ${cards[i].speed}`} index={i} oponentCard={oponentCard} playerStats={playerStats} setPlayerStats={setPlayerStats} unfade={unfade} doUnfade={doUnfade} revealedCount={revealedCount} setRevCount={setRevCount}  />\n                  <CustomButton pid={pid} data={`Hp: ${cards[i].hp}`} index={i} oponentCard={oponentCard} playerStats={playerStats} setPlayerStats={setPlayerStats} unfade={unfade} doUnfade={doUnfade} revealedCount={revealedCount} setRevCount={setRevCount}  />\n                  <CustomButton pid={pid} data={`Weight: ${cards[i].weight}`} index={i} oponentCard={oponentCard} playerStats={playerStats} setPlayerStats={setPlayerStats} unfade={unfade} doUnfade={doUnfade} revealedCount={revealedCount} setRevCount={setRevCount}  />\n                </div>\n              </Container>\n            )\n        }\n      </animated.div>\n    </animated.div>\n  ))\n}\n\nfunction CustomButton({ pid, data, index, oponentCard, playerStats, setPlayerStats, unfade, doUnfade, revealedCount, setRevCount  }) {\n  const id = data.split(\":\")[0].toLowerCase();\n\n  return <Button\n    id={id}\n    onClick={(event) => {\n      pid === 1\n      ? doUnfade([[...unfade[0], index], [...unfade[1]]])\n      : doUnfade([[...unfade[0]], [...unfade[1], index]])\n\n      console.log(\"rev count:  \"+revealedCount);\n      console.log(index);\n      console.log(event);\n      console.log(id);\n      console.log(oponentCard);\n      console.log(data.split(\" \")[1]);\n      console.log(oponentCard[index][id]);\n      console.log(pid);\n      console.log(typeof (pid));\n      if(parseInt(data.split(\" \")[1]) === oponentCard[index][id]) {\n        setPlayerStats([playerStats[0] + 1, playerStats[1] + 1]);\n      }\n      else if (pid === 0) {\n        if (parseInt(data.split(\" \")[1]) > oponentCard[index][id]) {\n          console.log(\"Player 1 wins\")\n          setPlayerStats([playerStats[0] + 1, playerStats[1]]);\n        } else {\n          console.log(\"Player 2 wins\")\n          setPlayerStats([playerStats[0], playerStats[1] + 1]);\n        }\n      } else {\n        if (parseInt(data.split(\" \")[1]) > oponentCard[index][id]) {\n          console.log(\"Player 1 wins\")\n          setPlayerStats([playerStats[0], playerStats[1] + 1]);\n        } else {\n          console.log(\"Player 2 wins\")\n          setPlayerStats([playerStats[0] + 1, playerStats[1]]);\n        }\n      }\n      console.log(playerStats);\n      setRevCount(revealedCount + 1);\n      // setTimeout(()=> {\n        \n      // }, 3000)\n    }}\n    style={{ display: 'block', width: '100%', height: '30px', padding: '8px' }} >\n    <Typography variant=\"h5\">{data}</Typography>\n  </Button>\n}\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":17},{"ruleId":"38","severity":1,"message":"42","line":3,"column":10,"nodeType":"40","messageId":"41","endLine":3,"endColumn":26},{"ruleId":"38","severity":1,"message":"43","line":13,"column":5,"nodeType":"40","messageId":"41","endLine":13,"endColumn":6},{"ruleId":"38","severity":1,"message":"44","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":16},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'SidePanel' is defined but never used.","Identifier","unusedVar","'CircularProgress' is defined but never used.","'a' is assigned a value but never used.","'render' is defined but never used.","no-global-assign","no-unsafe-negation"]